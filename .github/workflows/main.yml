# .github/workflows/main.yml

name: Web App CI/CD

on:
  push:
    branches:
      - main # Déclenche le workflow à chaque push sur la branche 'main'
  pull_request:
    branches:
      - main # Déclenche le workflow à chaque Pull Request sur 'main'

jobs:
  build_and_test:
    runs-on: ubuntu-latest # Exécute ce job sur une machine virtuelle Ubuntu

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4 # Récupère le code source du dépôt

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Utilisez la version de Node.js que votre projet requiert
          cache: 'npm' # Active le cache pour les dépendances npm

      - name: Install Dependencies
        run: npm ci # Installe les dépendances du projet

      - name: Run Unit Tests
        run: npm run test:unit # Assurez-vous que ce script est défini dans votre package.json

      - name: Run Integration Tests
        run: npm run test:integration -- --passWithNoTests # Assurez-vous que ce script est défini dans votre package.json
        # Ici, vous pourriez avoir besoin de services supplémentaires via Docker Compose
        # ou configurer une base de données temporaire.
        # Exemple si vous avez besoin de Docker Compose:
        # services:
        #   database:
        #     image: postgres:13
        #     env:
        #       POSTGRES_DB: testdb
        #       POSTGRES_USER: user
        #       POSTGRES_PASSWORD: password
        #     ports:
        #       - 5432:5432
        # steps:
        #   - name: Wait for database
        #     run: |
        #       while ! pg_isready -h localhost -p 5432 -U user; do
        #         sleep 5
        #       done

      - name: Lancer l'application et les tests E2E
        # Si vous utilisez Cypress, Playwright, etc.
        run: npx start-server-and-test start http://localhost:4173 test:e2e 
        # Assurez-vous que ce script est défini dans votre package.json
        # Si vous utilisez Playwright, vous pourriez avoir besoin de ses navigateurs
        # - name: Install Playwright browsers
        #   run: npx playwright install --with-deps
        # Si vous utilisez Cypress, vous pouvez utiliser une action dédiée
        # - name: Cypress run
        #   uses: cypress-io/github-action@v6
        #   with:
        #     start: npm start
        #     wait-on: 'http://localhost:3000'
        #     browser: chrome

      - name: Upload Test Results (e.g., Jest/Cypress reports)
        uses: actions/upload-artifact@v4 # Pour sauvegarder les rapports de tests
        if: always() # Toujours uploader les artefacts, même en cas d'échec des tests
        with:
          name: test-results
          path: |
            ./test-results/unit/*.xml # Adaptez les chemins à vos rapports
            ./test-results/integration/*.xml
            ./cypress/reports/*.xml # ou les rapports de votre outil E2E

      # Vous pouvez ajouter un stage de déploiement ici si vous le souhaitez, après tous les tests réussis.
      # - name: Deploy to Staging
      #   if: success() && github.ref == 'refs/heads/main'
      #   run: |
      #     # Vos commandes de déploiement ici
      #     echo "Deploying to staging environmen
